'''
'각 숫자를 적절한 위치에 삽입하면 어떨까?'
위의 접근법은 삽입 정렬(Insertion Sort)의 아이디어 !

지난 시간에는 두 숫자를 비교해서 당장 더 작은 숫자를 앞으로 보내주는 버블 정렬에 대해서 알아보았습니다.
이번 시간에는 삽입 정렬(Insertion Sort)에 대해서 알아볼 예정입니다.

삽입 정렬은 문제를 접근할 때 각 숫자를 적절한 위치에 삽입하는 방법으로 문제를 해결합니다.
삽입 정렬의 아이디어는 '검사하는 숫자의 왼쪽 파트는 모두 정렬이 되어있다'를 가정해서 접근합니다.

시간 복잡도 : O(N^2)

다음의 경우를 생각해보자 !
거의 정렬이 된 상태라면 어떤 정렬이 가장 효율적일까?
'2 3 4 5 6 7 8 9 10 1'

삽입 정렬은 데이터가 정렬되어 있다면 어떤 알고리즘보다도 빠르다는 특징 !
정렬이 이미 되어 있으면 정렬이 된 부분은 swap도 일어나지 않고 PASS
'''

data = [1, 10, 5, 8, 7, 6, 4, 3, 2, 9]
size = len(data)
for i in range(size-1):
  j=i # 검사하려는 시작 위치
  # 왼쪽 값이 더 크다면 위치 변경
  while(data[j]>data[j+1]):
    data[j], data[j+1] = data[j+1], data[j]
    j -= 1
    if(j<0) break

print(data)